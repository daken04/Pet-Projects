{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":76727,"databundleVersionId":9045607,"sourceType":"competition"}],"dockerImageVersionId":30746,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import pandas as pd\n\npd.set_option('display.max_columns', None)\ndf = pd.read_csv('/kaggle/input/playground-series-s4e8/train.csv')\ndf.head()","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-08-12T12:19:28.570704Z","iopub.execute_input":"2024-08-12T12:19:28.571111Z","iopub.status.idle":"2024-08-12T12:19:38.293476Z","shell.execute_reply.started":"2024-08-12T12:19:28.571077Z","shell.execute_reply":"2024-08-12T12:19:38.292374Z"},"trusted":true},"execution_count":1,"outputs":[{"execution_count":1,"output_type":"execute_result","data":{"text/plain":"   id class  cap-diameter cap-shape cap-surface cap-color  \\\n0   0     e          8.80         f           s         u   \n1   1     p          4.51         x           h         o   \n2   2     e          6.94         f           s         b   \n3   3     e          3.88         f           y         g   \n4   4     e          5.85         x           l         w   \n\n  does-bruise-or-bleed gill-attachment gill-spacing gill-color  stem-height  \\\n0                    f               a            c          w         4.51   \n1                    f               a            c          n         4.79   \n2                    f               x            c          w         6.85   \n3                    f               s          NaN          g         4.16   \n4                    f               d          NaN          w         3.37   \n\n   stem-width stem-root stem-surface stem-color veil-type veil-color has-ring  \\\n0       15.39       NaN          NaN          w       NaN        NaN        f   \n1        6.48       NaN            y          o       NaN        NaN        t   \n2        9.93       NaN            s          n       NaN        NaN        f   \n3        6.53       NaN          NaN          w       NaN        NaN        f   \n4        8.36       NaN          NaN          w       NaN        NaN        f   \n\n  ring-type spore-print-color habitat season  \n0         f               NaN       d      a  \n1         z               NaN       d      w  \n2         f               NaN       l      w  \n3         f               NaN       d      u  \n4         f               NaN       g      a  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>class</th>\n      <th>cap-diameter</th>\n      <th>cap-shape</th>\n      <th>cap-surface</th>\n      <th>cap-color</th>\n      <th>does-bruise-or-bleed</th>\n      <th>gill-attachment</th>\n      <th>gill-spacing</th>\n      <th>gill-color</th>\n      <th>stem-height</th>\n      <th>stem-width</th>\n      <th>stem-root</th>\n      <th>stem-surface</th>\n      <th>stem-color</th>\n      <th>veil-type</th>\n      <th>veil-color</th>\n      <th>has-ring</th>\n      <th>ring-type</th>\n      <th>spore-print-color</th>\n      <th>habitat</th>\n      <th>season</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>e</td>\n      <td>8.80</td>\n      <td>f</td>\n      <td>s</td>\n      <td>u</td>\n      <td>f</td>\n      <td>a</td>\n      <td>c</td>\n      <td>w</td>\n      <td>4.51</td>\n      <td>15.39</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>w</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>f</td>\n      <td>f</td>\n      <td>NaN</td>\n      <td>d</td>\n      <td>a</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>p</td>\n      <td>4.51</td>\n      <td>x</td>\n      <td>h</td>\n      <td>o</td>\n      <td>f</td>\n      <td>a</td>\n      <td>c</td>\n      <td>n</td>\n      <td>4.79</td>\n      <td>6.48</td>\n      <td>NaN</td>\n      <td>y</td>\n      <td>o</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>t</td>\n      <td>z</td>\n      <td>NaN</td>\n      <td>d</td>\n      <td>w</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>e</td>\n      <td>6.94</td>\n      <td>f</td>\n      <td>s</td>\n      <td>b</td>\n      <td>f</td>\n      <td>x</td>\n      <td>c</td>\n      <td>w</td>\n      <td>6.85</td>\n      <td>9.93</td>\n      <td>NaN</td>\n      <td>s</td>\n      <td>n</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>f</td>\n      <td>f</td>\n      <td>NaN</td>\n      <td>l</td>\n      <td>w</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>e</td>\n      <td>3.88</td>\n      <td>f</td>\n      <td>y</td>\n      <td>g</td>\n      <td>f</td>\n      <td>s</td>\n      <td>NaN</td>\n      <td>g</td>\n      <td>4.16</td>\n      <td>6.53</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>w</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>f</td>\n      <td>f</td>\n      <td>NaN</td>\n      <td>d</td>\n      <td>u</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>e</td>\n      <td>5.85</td>\n      <td>x</td>\n      <td>l</td>\n      <td>w</td>\n      <td>f</td>\n      <td>d</td>\n      <td>NaN</td>\n      <td>w</td>\n      <td>3.37</td>\n      <td>8.36</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>w</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>f</td>\n      <td>f</td>\n      <td>NaN</td>\n      <td>g</td>\n      <td>a</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"df_test = pd.read_csv('/kaggle/input/playground-series-s4e8/test.csv')\ndf_test.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-12T12:19:38.295247Z","iopub.execute_input":"2024-08-12T12:19:38.295555Z","iopub.status.idle":"2024-08-12T12:19:45.116974Z","shell.execute_reply.started":"2024-08-12T12:19:38.295529Z","shell.execute_reply":"2024-08-12T12:19:45.116157Z"},"trusted":true},"execution_count":2,"outputs":[{"execution_count":2,"output_type":"execute_result","data":{"text/plain":"        id  cap-diameter cap-shape cap-surface cap-color does-bruise-or-bleed  \\\n0  3116945          8.64         x         NaN         n                    t   \n1  3116946          6.90         o           t         o                    f   \n2  3116947          2.00         b           g         n                    f   \n3  3116948          3.47         x           t         n                    f   \n4  3116949          6.17         x           h         y                    f   \n\n  gill-attachment gill-spacing gill-color  stem-height  stem-width stem-root  \\\n0             NaN          NaN          w        11.13       17.12         b   \n1             NaN            c          y         1.27       10.75       NaN   \n2             NaN            c          n         6.18        3.14       NaN   \n3               s            c          n         4.98        8.51       NaN   \n4               p          NaN          y         6.73       13.70       NaN   \n\n  stem-surface stem-color veil-type veil-color has-ring ring-type  \\\n0          NaN          w         u          w        t         g   \n1          NaN          n       NaN        NaN        f         f   \n2          NaN          n       NaN        NaN        f         f   \n3          NaN          w       NaN          n        t         z   \n4          NaN          y       NaN          y        t       NaN   \n\n  spore-print-color habitat season  \n0               NaN       d      a  \n1               NaN       d      a  \n2               NaN       d      s  \n3               NaN       d      u  \n4               NaN       d      u  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>cap-diameter</th>\n      <th>cap-shape</th>\n      <th>cap-surface</th>\n      <th>cap-color</th>\n      <th>does-bruise-or-bleed</th>\n      <th>gill-attachment</th>\n      <th>gill-spacing</th>\n      <th>gill-color</th>\n      <th>stem-height</th>\n      <th>stem-width</th>\n      <th>stem-root</th>\n      <th>stem-surface</th>\n      <th>stem-color</th>\n      <th>veil-type</th>\n      <th>veil-color</th>\n      <th>has-ring</th>\n      <th>ring-type</th>\n      <th>spore-print-color</th>\n      <th>habitat</th>\n      <th>season</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>3116945</td>\n      <td>8.64</td>\n      <td>x</td>\n      <td>NaN</td>\n      <td>n</td>\n      <td>t</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>w</td>\n      <td>11.13</td>\n      <td>17.12</td>\n      <td>b</td>\n      <td>NaN</td>\n      <td>w</td>\n      <td>u</td>\n      <td>w</td>\n      <td>t</td>\n      <td>g</td>\n      <td>NaN</td>\n      <td>d</td>\n      <td>a</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3116946</td>\n      <td>6.90</td>\n      <td>o</td>\n      <td>t</td>\n      <td>o</td>\n      <td>f</td>\n      <td>NaN</td>\n      <td>c</td>\n      <td>y</td>\n      <td>1.27</td>\n      <td>10.75</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>n</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>f</td>\n      <td>f</td>\n      <td>NaN</td>\n      <td>d</td>\n      <td>a</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3116947</td>\n      <td>2.00</td>\n      <td>b</td>\n      <td>g</td>\n      <td>n</td>\n      <td>f</td>\n      <td>NaN</td>\n      <td>c</td>\n      <td>n</td>\n      <td>6.18</td>\n      <td>3.14</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>n</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>f</td>\n      <td>f</td>\n      <td>NaN</td>\n      <td>d</td>\n      <td>s</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3116948</td>\n      <td>3.47</td>\n      <td>x</td>\n      <td>t</td>\n      <td>n</td>\n      <td>f</td>\n      <td>s</td>\n      <td>c</td>\n      <td>n</td>\n      <td>4.98</td>\n      <td>8.51</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>w</td>\n      <td>NaN</td>\n      <td>n</td>\n      <td>t</td>\n      <td>z</td>\n      <td>NaN</td>\n      <td>d</td>\n      <td>u</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>3116949</td>\n      <td>6.17</td>\n      <td>x</td>\n      <td>h</td>\n      <td>y</td>\n      <td>f</td>\n      <td>p</td>\n      <td>NaN</td>\n      <td>y</td>\n      <td>6.73</td>\n      <td>13.70</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>y</td>\n      <td>NaN</td>\n      <td>y</td>\n      <td>t</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>d</td>\n      <td>u</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"print(f\"Train columns: {len(df.columns)}, Test columns: {len(df_test.columns)}\")","metadata":{"execution":{"iopub.status.busy":"2024-08-12T12:19:45.118237Z","iopub.execute_input":"2024-08-12T12:19:45.118594Z","iopub.status.idle":"2024-08-12T12:19:45.123935Z","shell.execute_reply.started":"2024-08-12T12:19:45.118567Z","shell.execute_reply":"2024-08-12T12:19:45.122868Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"Train columns: 22, Test columns: 21\n","output_type":"stream"}]},{"cell_type":"code","source":"print(df.columns)","metadata":{"execution":{"iopub.status.busy":"2024-08-12T12:19:45.126281Z","iopub.execute_input":"2024-08-12T12:19:45.126557Z","iopub.status.idle":"2024-08-12T12:19:45.134141Z","shell.execute_reply.started":"2024-08-12T12:19:45.126533Z","shell.execute_reply":"2024-08-12T12:19:45.133137Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stdout","text":"Index(['id', 'class', 'cap-diameter', 'cap-shape', 'cap-surface', 'cap-color',\n       'does-bruise-or-bleed', 'gill-attachment', 'gill-spacing', 'gill-color',\n       'stem-height', 'stem-width', 'stem-root', 'stem-surface', 'stem-color',\n       'veil-type', 'veil-color', 'has-ring', 'ring-type', 'spore-print-color',\n       'habitat', 'season'],\n      dtype='object')\n","output_type":"stream"}]},{"cell_type":"code","source":"df.info()","metadata":{"execution":{"iopub.status.busy":"2024-08-12T12:19:45.135251Z","iopub.execute_input":"2024-08-12T12:19:45.135544Z","iopub.status.idle":"2024-08-12T12:19:45.163900Z","shell.execute_reply.started":"2024-08-12T12:19:45.135522Z","shell.execute_reply":"2024-08-12T12:19:45.162946Z"},"trusted":true},"execution_count":5,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 3116945 entries, 0 to 3116944\nData columns (total 22 columns):\n #   Column                Dtype  \n---  ------                -----  \n 0   id                    int64  \n 1   class                 object \n 2   cap-diameter          float64\n 3   cap-shape             object \n 4   cap-surface           object \n 5   cap-color             object \n 6   does-bruise-or-bleed  object \n 7   gill-attachment       object \n 8   gill-spacing          object \n 9   gill-color            object \n 10  stem-height           float64\n 11  stem-width            float64\n 12  stem-root             object \n 13  stem-surface          object \n 14  stem-color            object \n 15  veil-type             object \n 16  veil-color            object \n 17  has-ring              object \n 18  ring-type             object \n 19  spore-print-color     object \n 20  habitat               object \n 21  season                object \ndtypes: float64(3), int64(1), object(18)\nmemory usage: 523.2+ MB\n","output_type":"stream"}]},{"cell_type":"code","source":"#Number of classes before processing the data\nlen(set(df['class']))","metadata":{"execution":{"iopub.status.busy":"2024-08-12T12:19:45.165195Z","iopub.execute_input":"2024-08-12T12:19:45.165587Z","iopub.status.idle":"2024-08-12T12:19:45.517872Z","shell.execute_reply.started":"2024-08-12T12:19:45.165551Z","shell.execute_reply":"2024-08-12T12:19:45.516962Z"},"trusted":true},"execution_count":6,"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"2"},"metadata":{}}]},{"cell_type":"code","source":"df.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-08-12T12:19:45.519333Z","iopub.execute_input":"2024-08-12T12:19:45.519792Z","iopub.status.idle":"2024-08-12T12:19:49.827289Z","shell.execute_reply.started":"2024-08-12T12:19:45.519761Z","shell.execute_reply":"2024-08-12T12:19:49.826297Z"},"trusted":true},"execution_count":7,"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"id                            0\nclass                         0\ncap-diameter                  4\ncap-shape                    40\ncap-surface              671023\ncap-color                    12\ndoes-bruise-or-bleed          8\ngill-attachment          523936\ngill-spacing            1258435\ngill-color                   57\nstem-height                   0\nstem-width                    0\nstem-root               2757023\nstem-surface            1980861\nstem-color                   38\nveil-type               2957493\nveil-color              2740947\nhas-ring                     24\nring-type                128880\nspore-print-color       2849682\nhabitat                      45\nseason                        0\ndtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"# Column Selection\n\n# List of columns to drop\ncolumns_to_drop = ['cap-surface', 'gill-attachment', 'gill-spacing', 'stem-root', \n                   'stem-surface', 'veil-type', 'veil-color', 'ring-type', \n                   'spore-print-color']\n\n# Drop the columns\ndf = df.drop(columns=columns_to_drop)","metadata":{"execution":{"iopub.status.busy":"2024-08-12T12:19:49.828423Z","iopub.execute_input":"2024-08-12T12:19:49.828733Z","iopub.status.idle":"2024-08-12T12:19:50.136492Z","shell.execute_reply.started":"2024-08-12T12:19:49.828708Z","shell.execute_reply":"2024-08-12T12:19:50.135712Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"code","source":"df.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-08-12T12:19:50.137528Z","iopub.execute_input":"2024-08-12T12:19:50.137766Z","iopub.status.idle":"2024-08-12T12:19:52.673639Z","shell.execute_reply.started":"2024-08-12T12:19:50.137744Z","shell.execute_reply":"2024-08-12T12:19:52.672647Z"},"trusted":true},"execution_count":9,"outputs":[{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"id                       0\nclass                    0\ncap-diameter             4\ncap-shape               40\ncap-color               12\ndoes-bruise-or-bleed     8\ngill-color              57\nstem-height              0\nstem-width               0\nstem-color              38\nhas-ring                24\nhabitat                 45\nseason                   0\ndtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"# Handle NULL\n## remove those rows\ndf.dropna(subset=df.columns.tolist(), inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-08-12T12:19:52.677761Z","iopub.execute_input":"2024-08-12T12:19:52.678072Z","iopub.status.idle":"2024-08-12T12:19:56.084223Z","shell.execute_reply.started":"2024-08-12T12:19:52.678047Z","shell.execute_reply":"2024-08-12T12:19:56.083356Z"},"trusted":true},"execution_count":10,"outputs":[]},{"cell_type":"code","source":"df.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-08-12T12:19:56.085429Z","iopub.execute_input":"2024-08-12T12:19:56.085724Z","iopub.status.idle":"2024-08-12T12:19:58.626643Z","shell.execute_reply.started":"2024-08-12T12:19:56.085699Z","shell.execute_reply":"2024-08-12T12:19:58.625753Z"},"trusted":true},"execution_count":11,"outputs":[{"execution_count":11,"output_type":"execute_result","data":{"text/plain":"id                      0\nclass                   0\ncap-diameter            0\ncap-shape               0\ncap-color               0\ndoes-bruise-or-bleed    0\ngill-color              0\nstem-height             0\nstem-width              0\nstem-color              0\nhas-ring                0\nhabitat                 0\nseason                  0\ndtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"df.shape","metadata":{"execution":{"iopub.status.busy":"2024-08-12T12:19:58.627819Z","iopub.execute_input":"2024-08-12T12:19:58.628202Z","iopub.status.idle":"2024-08-12T12:19:58.634322Z","shell.execute_reply.started":"2024-08-12T12:19:58.628169Z","shell.execute_reply":"2024-08-12T12:19:58.633387Z"},"trusted":true},"execution_count":12,"outputs":[{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"(3116717, 13)"},"metadata":{}}]},{"cell_type":"code","source":"from sklearn.preprocessing import StandardScaler, LabelEncoder\nfrom sklearn.model_selection import train_test_split\n\nlabel_encoder = LabelEncoder()\nobject_columns = df.select_dtypes(include=['object']).columns.tolist()\n\nfor col in object_columns:\n    df[col] = label_encoder.fit_transform(df[col])\n    \nX = df.drop('class',axis=1).values\ny = df['class'].values\ny =  label_encoder.fit_transform(y)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","metadata":{"execution":{"iopub.status.busy":"2024-08-12T12:19:58.635748Z","iopub.execute_input":"2024-08-12T12:19:58.636079Z","iopub.status.idle":"2024-08-12T12:20:07.367690Z","shell.execute_reply.started":"2024-08-12T12:19:58.636050Z","shell.execute_reply":"2024-08-12T12:20:07.366664Z"},"trusted":true},"execution_count":13,"outputs":[]},{"cell_type":"code","source":"X_train","metadata":{"execution":{"iopub.status.busy":"2024-08-12T12:20:07.368961Z","iopub.execute_input":"2024-08-12T12:20:07.369263Z","iopub.status.idle":"2024-08-12T12:20:07.376123Z","shell.execute_reply.started":"2024-08-12T12:20:07.369238Z","shell.execute_reply":"2024-08-12T12:20:07.375162Z"},"trusted":true},"execution_count":14,"outputs":[{"execution_count":14,"output_type":"execute_result","data":{"text/plain":"array([[-0.44676964,  0.35026889,  0.87960683, ..., -0.56187595,\n        -0.53584786,  0.8572542 ],\n       [-0.36188418,  0.01543479,  0.87960683, ..., -0.56187595,\n        -0.53584786,  0.8572542 ],\n       [-0.93103364, -1.0448732 , -0.00479324, ..., -0.56187595,\n        -0.53584786, -0.04830603],\n       ...,\n       [ 0.74529775,  0.27299948, -1.11029334, ..., -0.56187595,\n         0.67066076, -0.95386626],\n       [ 1.34464509, -0.1648605 ,  0.4374068 , ...,  1.77976831,\n        -0.53584786,  0.8572542 ],\n       [ 0.73421042, -0.81735772, -1.66304339, ..., -0.56187595,\n         0.42935904,  0.8572542 ]])"},"metadata":{}}]},{"cell_type":"code","source":"y_train","metadata":{"execution":{"iopub.status.busy":"2024-08-12T12:20:07.377203Z","iopub.execute_input":"2024-08-12T12:20:07.377487Z","iopub.status.idle":"2024-08-12T12:20:07.386557Z","shell.execute_reply.started":"2024-08-12T12:20:07.377465Z","shell.execute_reply":"2024-08-12T12:20:07.385577Z"},"trusted":true},"execution_count":15,"outputs":[{"execution_count":15,"output_type":"execute_result","data":{"text/plain":"array([0, 0, 1, ..., 1, 1, 1])"},"metadata":{}}]},{"cell_type":"code","source":"import torch\n\n# Convert to PyTorch tensors\nX_train_tensor = torch.tensor(X_train, dtype=torch.float32)\ny_train_tensor = torch.tensor(y_train, dtype=torch.long)\nX_test_tensor = torch.tensor(X_test, dtype=torch.float32)\ny_test_tensor = torch.tensor(y_test, dtype=torch.long)","metadata":{"execution":{"iopub.status.busy":"2024-08-12T12:20:07.387864Z","iopub.execute_input":"2024-08-12T12:20:07.388240Z","iopub.status.idle":"2024-08-12T12:20:10.759784Z","shell.execute_reply.started":"2024-08-12T12:20:07.388210Z","shell.execute_reply":"2024-08-12T12:20:10.758946Z"},"trusted":true},"execution_count":16,"outputs":[]},{"cell_type":"code","source":"from torch.utils.data import DataLoader, TensorDataset\n\n\ntrain_Dataset = TensorDataset(X_train_tensor,y_train_tensor)\nprint(train_Dataset[0])\n## this is how train_dataset looks\n\n# Similarly make a test_Dataset\ntest_Dataset = TensorDataset(X_test_tensor, y_test_tensor)","metadata":{"execution":{"iopub.status.busy":"2024-08-12T12:20:10.761119Z","iopub.execute_input":"2024-08-12T12:20:10.761643Z","iopub.status.idle":"2024-08-12T12:20:10.813924Z","shell.execute_reply.started":"2024-08-12T12:20:10.761608Z","shell.execute_reply":"2024-08-12T12:20:10.813006Z"},"trusted":true},"execution_count":17,"outputs":[{"name":"stdout","text":"(tensor([-0.4468,  0.3503,  0.8796, -0.7641, -0.4614,  0.8960, -0.4102,  0.9590,\n         0.7857, -0.5619, -0.5358,  0.8573]), tensor(0))\n","output_type":"stream"}]},{"cell_type":"code","source":"## Make dataloader\ntrain_loader = DataLoader(train_Dataset, batch_size=32, shuffle=True)\ntest_loader = DataLoader(test_Dataset, batch_size=32, shuffle=True)","metadata":{"execution":{"iopub.status.busy":"2024-08-12T12:20:10.814958Z","iopub.execute_input":"2024-08-12T12:20:10.815221Z","iopub.status.idle":"2024-08-12T12:20:10.819905Z","shell.execute_reply.started":"2024-08-12T12:20:10.815198Z","shell.execute_reply":"2024-08-12T12:20:10.818951Z"},"trusted":true},"execution_count":18,"outputs":[]},{"cell_type":"code","source":"for x in train_loader:\n    print(x)\n    break\n    \n# this is how dataloader represents","metadata":{"execution":{"iopub.status.busy":"2024-08-12T12:20:10.821109Z","iopub.execute_input":"2024-08-12T12:20:10.821410Z","iopub.status.idle":"2024-08-12T12:20:11.086794Z","shell.execute_reply.started":"2024-08-12T12:20:10.821387Z","shell.execute_reply":"2024-08-12T12:20:11.085882Z"},"trusted":true},"execution_count":19,"outputs":[{"name":"stdout","text":"[tensor([[-0.6442,  3.2629, -1.1103, -1.5157, -0.4614,  1.1203,  0.0713,  4.6584,\n         -0.7061, -0.5619, -0.5358,  1.7628],\n        [-1.1286,  0.1356,  0.4374,  1.6408,  2.1672, -0.4496, -0.0101,  0.1201,\n          0.7857,  1.7798, -0.5358, -0.9539],\n        [ 1.0577, -0.6135,  0.4374,  1.0396, -0.4614,  0.8960, -0.6955, -0.5657,\n          1.1171, -0.5619, -0.5358, -0.9539],\n        [-1.2566, -0.9118, -1.1103, -0.3132, -0.4614,  1.1203, -0.7844, -1.0377,\n         -0.7061, -0.5619,  2.1185, -0.9539],\n        [ 0.1073, -0.2078,  0.8796, -0.3132, -0.4614, -0.3375, -0.4399, -0.1925,\n         -0.7061, -0.5619, -0.5358,  1.7628],\n        [ 0.8169, -0.9912, -1.6630, -0.3132, -0.4614, -0.5617, -0.5547, -1.1748,\n         -0.7061, -0.5619,  0.6707, -0.0483],\n        [-1.6033, -0.8560, -1.4419,  1.6408, -0.4614,  1.1203,  0.3825, -1.0476,\n          1.1171, -0.5619,  0.4294, -0.9539],\n        [ 0.7745,  1.8656,  0.4374, -0.3132, -0.4614,  1.1203, -0.2620,  2.5888,\n         -1.2033, -0.5619, -0.5358,  0.8573],\n        [ 0.6241, -0.0232,  0.8796, -1.5157, -0.4614,  0.8960, -0.6881,  0.5365,\n          0.7857, -0.5619, -0.5358,  0.8573],\n        [ 0.1715, -0.5534,  0.8796, -0.3132, -0.4614, -1.9074, -0.6621, -0.0925,\n         -0.7061, -0.5619, -0.5358, -0.9539],\n        [-1.0692,  0.0068,  0.8796, -0.3132, -0.4614,  0.8960, -0.1324, -0.2840,\n          0.7857, -0.5619, -0.5358,  0.8573],\n        [ 0.0172, -0.0211,  0.8796, -2.4175, -0.4614, -0.4496, -0.4102,  0.2807,\n          0.7857, -0.5619,  0.4294,  1.7628],\n        [ 1.0284, -0.4825,  0.8796, -0.3132, -0.4614, -0.4496, -0.1657, -0.4792,\n          0.7857, -0.5619, -0.5358, -0.9539],\n        [ 0.5535, -0.6156, -1.6630, -1.5157, -0.4614, -0.5617, -0.5621, -0.9314,\n          0.7857,  1.7798,  2.3598,  0.8573],\n        [ 0.6746, -0.3902, -1.6630, -0.6138, -0.4614,  0.6717, -0.0435, -0.3865,\n         -1.0375,  1.7798,  0.4294, -0.9539],\n        [ 0.7973,  0.1507,  0.8796, -0.3132, -0.4614, -0.5617, -0.2583, -0.4767,\n         -0.7061, -0.5619, -0.5358, -0.9539],\n        [ 1.5801, -0.4890, -1.4419, -1.2150, -0.4614, -1.6831, -0.3547,  0.8750,\n         -0.7061, -0.5619,  2.1185, -0.0483],\n        [-1.5840,  0.1077,  0.4374, -1.5157,  2.1672,  1.1203, -0.4695, -0.3902,\n         -2.5293, -0.5619, -0.5358,  0.8573],\n        [-1.3614, -0.3859, -1.1103, -0.3132, -0.4614,  0.8960, -0.7103, -0.4841,\n          0.7857, -0.5619, -0.5358, -0.9539],\n        [ 0.2478, -0.1112,  0.4374, -0.3132,  2.1672, -0.3375, -0.1546, -0.6509,\n         -2.5293, -0.5619, -0.5358,  0.8573],\n        [ 0.4588, -0.0211, -1.6630, -1.2150, -0.4614,  0.8960, -0.3398, -0.1159,\n         -2.0320, -0.5619, -0.5358,  0.8573],\n        [-1.5901,  2.9045,  0.4374, -0.7641, -0.4614,  1.1203,  0.3492,  1.6411,\n          0.7857, -0.5619, -0.5358, -0.9539],\n        [-0.6792, -0.9139, -1.6630, -0.3132, -0.4614, -0.5617,  0.0417, -0.9907,\n         -0.7061, -0.5619,  2.3598, -0.9539],\n        [ 1.0258, -0.5855, -1.6630, -0.3132, -0.4614, -0.3375, -0.5065, -0.9154,\n         -0.7061, -0.5619,  0.4294, -0.9539],\n        [ 0.8260, -0.4975, -1.6630, -0.3132, -0.4614, -1.5710, -0.1102, -0.8153,\n          0.7857, -0.5619, -0.5358, -0.9539],\n        [-0.9000, -0.0554,  0.8796, -0.3132, -0.4614, -0.5617, -0.4621, -0.6979,\n         -0.7061,  1.7798, -0.5358,  0.8573],\n        [-1.3935, -0.5684, -1.6630, -1.2150, -0.4614, -1.5710, -0.2695, -0.9821,\n         -0.7061, -0.5619, -0.5358, -0.9539],\n        [ 0.5437,  0.5778,  0.4374,  1.3402,  2.1672,  0.8960, -0.6510,  1.6744,\n          0.7857, -0.5619, -0.5358,  0.8573],\n        [-0.5029, -0.5855,  0.4374,  1.0396, -0.4614,  0.6717, -0.2065, -0.6299,\n          0.6199, -0.5619,  2.1185, -0.9539],\n        [-0.8875, -1.0256,  0.8796, -0.3132, -0.4614, -1.5710, -0.5102, -1.0636,\n          0.7857, -0.5619,  0.4294, -0.9539],\n        [ 0.9220, -0.9225, -1.1103, -0.3132, -0.4614,  0.8960,  0.0121, -0.9178,\n         -0.7061, -0.5619,  0.6707, -0.9539],\n        [-0.3041,  1.9837,  0.1058, -0.1629, -0.4614,  0.8960,  2.1792,  2.6926,\n          0.7857, -0.5619, -0.5358,  0.8573]]), tensor([1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1,\n        1, 0, 0, 1, 1, 0, 0, 0])]\n","output_type":"stream"}]},{"cell_type":"code","source":"# Making binary classification model\nimport torch.nn as nn\n\nclass BinaryClassify(nn.Module):\n    def __init__(self):\n        super(BinaryClassify, self).__init__()\n        self.layer1 = nn.Linear(12,64,bias=True)\n        self.layer2 = nn.Linear(64,64,bias=True)\n        self.layer3 = nn.Linear(64,1,bias=True)\n        \n        self.relu = nn.ReLU();\n        \n    def forward(self,x):\n        out = self.relu(self.layer1(x))\n        out = self.relu(self.layer2(out))\n        out = self.layer3(out)\n        return out\n        ","metadata":{"execution":{"iopub.status.busy":"2024-08-12T12:20:11.088014Z","iopub.execute_input":"2024-08-12T12:20:11.089157Z","iopub.status.idle":"2024-08-12T12:20:11.095997Z","shell.execute_reply.started":"2024-08-12T12:20:11.089129Z","shell.execute_reply":"2024-08-12T12:20:11.095145Z"},"trusted":true},"execution_count":20,"outputs":[]},{"cell_type":"code","source":"device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\nprint('Using device:', device)\nprint()","metadata":{"execution":{"iopub.status.busy":"2024-08-12T12:20:11.097239Z","iopub.execute_input":"2024-08-12T12:20:11.097532Z","iopub.status.idle":"2024-08-12T12:20:11.129316Z","shell.execute_reply.started":"2024-08-12T12:20:11.097509Z","shell.execute_reply":"2024-08-12T12:20:11.128348Z"},"trusted":true},"execution_count":21,"outputs":[{"name":"stdout","text":"Using device: cuda\n\n","output_type":"stream"}]},{"cell_type":"code","source":"import torch.optim as optim\n\nmodel = BinaryClassify()\nmodel.to(device)\n\nloss_fn = nn.BCEWithLogitsLoss()\noptimizer = optim.Adam(model.parameters(), lr=0.01)","metadata":{"execution":{"iopub.status.busy":"2024-08-12T12:20:11.130471Z","iopub.execute_input":"2024-08-12T12:20:11.131262Z","iopub.status.idle":"2024-08-12T12:20:12.528956Z","shell.execute_reply.started":"2024-08-12T12:20:11.131234Z","shell.execute_reply":"2024-08-12T12:20:12.527943Z"},"trusted":true},"execution_count":22,"outputs":[]},{"cell_type":"code","source":"print(model.state_dict())\n\n# The state_dict in PyTorch is a Python dictionary object that maps each layer to its corresponding parameters (weights and biases). The keys in the state_dict are the names of the layers, and the values are the tensors containing the parameters. The shape of each tensor in state_dict corresponds to the shape of the parameters in the respective layer of the model.","metadata":{"execution":{"iopub.status.busy":"2024-08-12T12:20:12.530313Z","iopub.execute_input":"2024-08-12T12:20:12.531276Z","iopub.status.idle":"2024-08-12T12:20:12.801854Z","shell.execute_reply.started":"2024-08-12T12:20:12.531242Z","shell.execute_reply":"2024-08-12T12:20:12.800961Z"},"trusted":true},"execution_count":23,"outputs":[{"name":"stdout","text":"OrderedDict([('layer1.weight', tensor([[ 0.0943, -0.2761, -0.2742, -0.1868,  0.1050,  0.0033, -0.1165,  0.1530,\n          0.1942, -0.2489, -0.1104,  0.0061],\n        [-0.1068, -0.1840, -0.1583,  0.0595,  0.2418, -0.0263,  0.1806, -0.1807,\n         -0.0150, -0.0714,  0.2207,  0.0518],\n        [-0.0165, -0.2772, -0.0565, -0.1641, -0.1313,  0.0407, -0.0053, -0.0655,\n          0.0216, -0.0202, -0.1393,  0.0515],\n        [-0.1777, -0.1915, -0.0760,  0.0065,  0.0095,  0.0782,  0.1188, -0.0997,\n          0.0158, -0.2106, -0.2745,  0.1031],\n        [-0.0394,  0.0944,  0.0863, -0.2834, -0.1769,  0.1990,  0.1140,  0.0999,\n         -0.1599,  0.2565,  0.2744, -0.2503],\n        [ 0.1016, -0.0289, -0.1510,  0.0230,  0.0260, -0.1001,  0.0166,  0.1777,\n         -0.1841, -0.2401, -0.0662,  0.1963],\n        [ 0.0087, -0.0390, -0.2169,  0.0299, -0.2145,  0.1199, -0.0024,  0.0864,\n         -0.0153, -0.2337,  0.2093,  0.0246],\n        [ 0.1932,  0.2604, -0.2495,  0.1582,  0.1378, -0.1214, -0.0866, -0.1643,\n          0.1130,  0.1947, -0.0104, -0.2556],\n        [-0.1708, -0.1299,  0.0901, -0.0750,  0.1944,  0.0783,  0.2067,  0.0877,\n         -0.2222, -0.2648, -0.0918,  0.0907],\n        [-0.0565, -0.2862,  0.1357,  0.0563,  0.1480, -0.0154, -0.1779, -0.1741,\n         -0.1668,  0.0462,  0.0661, -0.1555],\n        [ 0.0898, -0.2484, -0.2613, -0.1707, -0.0005,  0.2515,  0.1438, -0.1655,\n          0.2599,  0.1936, -0.0506, -0.2878],\n        [ 0.2644,  0.0135, -0.2064, -0.1085,  0.0096, -0.1973,  0.2288, -0.0676,\n          0.0667,  0.0667,  0.1458, -0.0969],\n        [-0.2621, -0.0772,  0.2556, -0.1546, -0.1516, -0.2696, -0.1068, -0.2739,\n          0.1178, -0.0048,  0.0422, -0.2768],\n        [ 0.2321, -0.0841,  0.0303, -0.1099,  0.0068, -0.2095, -0.2807, -0.2582,\n          0.2579,  0.0498,  0.1482, -0.1174],\n        [-0.1783,  0.0991, -0.0906,  0.1897, -0.1555, -0.1460,  0.2281,  0.1035,\n          0.1934,  0.0025, -0.1372, -0.0737],\n        [-0.1122, -0.1603,  0.1564,  0.0532,  0.1520, -0.0538,  0.1117, -0.1660,\n          0.1732,  0.0047,  0.1152, -0.2578],\n        [ 0.0797, -0.0069,  0.1908,  0.0257, -0.0069,  0.2599,  0.1608,  0.1936,\n         -0.2442, -0.1315,  0.1998,  0.1938],\n        [ 0.1527,  0.0044,  0.2148, -0.2318,  0.1760,  0.0374,  0.2407, -0.1707,\n          0.0498, -0.0978, -0.1063,  0.1097],\n        [ 0.0948, -0.1451,  0.1910,  0.0319,  0.1261,  0.1055,  0.2028, -0.1269,\n          0.0050,  0.2257,  0.2161, -0.2582],\n        [ 0.1722,  0.1169,  0.0115,  0.1392,  0.2322,  0.2067,  0.0893, -0.0390,\n          0.0916, -0.2660,  0.1785,  0.0651],\n        [-0.1450, -0.2838, -0.1109,  0.1711,  0.1779, -0.2385,  0.1785, -0.0232,\n         -0.2588, -0.0321, -0.1721, -0.0706],\n        [ 0.0774,  0.2875,  0.2139,  0.0368, -0.0471, -0.0083,  0.2450,  0.1119,\n         -0.0506, -0.0413,  0.1169, -0.1280],\n        [ 0.0590, -0.2362, -0.1961, -0.0015, -0.0145, -0.1235,  0.1032, -0.1318,\n          0.1966, -0.0762,  0.2391,  0.2024],\n        [-0.0104, -0.1461,  0.1844, -0.0041, -0.1151, -0.2713, -0.1903,  0.2071,\n          0.1631, -0.2261, -0.1723, -0.2671],\n        [ 0.0960, -0.2179,  0.0278, -0.2479,  0.2178, -0.2097,  0.0474, -0.0220,\n          0.0125, -0.1063, -0.2338, -0.2156],\n        [-0.1531, -0.0332, -0.0198, -0.0495,  0.0553,  0.0494,  0.2610,  0.1031,\n         -0.0827,  0.1836, -0.2320,  0.1561],\n        [ 0.0934, -0.2706, -0.1312, -0.1163, -0.1227,  0.0542, -0.1273,  0.1761,\n          0.2477, -0.2782,  0.0888, -0.1656],\n        [-0.0356,  0.0987, -0.1545, -0.1687,  0.1750, -0.1371, -0.1197,  0.2674,\n         -0.2164,  0.2147, -0.0703,  0.1427],\n        [-0.2111,  0.1929, -0.0993, -0.1781, -0.0983, -0.2774,  0.2751,  0.0641,\n          0.0461,  0.1448,  0.0488, -0.2240],\n        [-0.1603, -0.1859,  0.1851,  0.1591, -0.0620, -0.0749, -0.1642, -0.0488,\n         -0.2409,  0.1893,  0.1109, -0.1018],\n        [-0.1355, -0.2577,  0.0998,  0.2819,  0.0553, -0.1184,  0.0355, -0.0734,\n          0.1782, -0.2196, -0.1530,  0.0354],\n        [ 0.1993, -0.2528,  0.1516,  0.0602,  0.2196, -0.1453, -0.1540, -0.1738,\n         -0.2283, -0.1456,  0.1468, -0.0374],\n        [ 0.1693,  0.0279,  0.2787, -0.0342, -0.0690, -0.2534, -0.1823,  0.1091,\n         -0.0593,  0.1629, -0.0730,  0.2234],\n        [ 0.1045, -0.2073,  0.0625,  0.2378,  0.0916, -0.1774,  0.0610, -0.0398,\n          0.1896, -0.1223, -0.2638,  0.1488],\n        [-0.2647,  0.0172, -0.2290,  0.1143, -0.1437, -0.2272, -0.0792,  0.0384,\n          0.2706, -0.2812,  0.2819,  0.2490],\n        [ 0.0058, -0.2256,  0.1213, -0.1794,  0.1402, -0.0289,  0.1008,  0.1178,\n         -0.2688,  0.0960, -0.0627,  0.2884],\n        [-0.2311, -0.2415,  0.2650,  0.0265, -0.0247,  0.2767,  0.0837,  0.2242,\n          0.0565,  0.1434, -0.1205, -0.2528],\n        [-0.0969,  0.2825, -0.2150, -0.2697, -0.0096, -0.1959,  0.0469,  0.2711,\n         -0.1593,  0.1517, -0.0410, -0.2803],\n        [ 0.1321, -0.0952, -0.1430,  0.1451,  0.0334,  0.0078, -0.0550, -0.2526,\n          0.0274, -0.0563, -0.0024,  0.1192],\n        [ 0.0934, -0.2292,  0.0918,  0.1422,  0.2647,  0.0601,  0.1282,  0.1882,\n          0.2754,  0.1673,  0.2116,  0.2664],\n        [ 0.0792, -0.2193,  0.0405, -0.0459,  0.1003,  0.2205, -0.1591, -0.2744,\n         -0.0749,  0.0403, -0.2814, -0.1215],\n        [-0.2025,  0.0418,  0.2173,  0.1159, -0.2196, -0.1679,  0.0355,  0.0528,\n         -0.1474,  0.0709, -0.0559, -0.0935],\n        [ 0.2123,  0.2538,  0.1055, -0.2626,  0.2178,  0.2631,  0.2460,  0.0673,\n          0.0836,  0.1772,  0.0410, -0.0569],\n        [-0.0342,  0.0145,  0.1633,  0.0571,  0.2609,  0.1798, -0.2159,  0.0415,\n         -0.0379,  0.0411, -0.1659, -0.2003],\n        [-0.2139,  0.2649,  0.0978, -0.1964,  0.1169,  0.1150, -0.2692,  0.2688,\n          0.1188, -0.0213,  0.2550,  0.0627],\n        [-0.2425,  0.0259, -0.1693, -0.2171,  0.0148, -0.2480,  0.0014,  0.1727,\n          0.2527, -0.2154,  0.0369, -0.2205],\n        [ 0.0430,  0.0013, -0.0936, -0.0347, -0.0290, -0.1835,  0.0760, -0.2063,\n         -0.1221,  0.0786,  0.1314,  0.1270],\n        [-0.1751,  0.1356,  0.1968, -0.0589, -0.2632,  0.0910, -0.0629,  0.1481,\n         -0.2166,  0.1424, -0.2879,  0.2121],\n        [-0.1589,  0.1497, -0.0044,  0.2884,  0.0527,  0.0282, -0.1025, -0.2078,\n          0.1545, -0.1947,  0.0859,  0.0473],\n        [-0.1396,  0.0894,  0.2140,  0.2071, -0.1506,  0.2172, -0.0337, -0.1192,\n         -0.2503, -0.1238, -0.0299,  0.0232],\n        [-0.2477, -0.1286, -0.1889, -0.2078,  0.1990,  0.2175, -0.2273, -0.2330,\n         -0.2278, -0.2610, -0.1457,  0.0658],\n        [ 0.0877,  0.0433,  0.1013,  0.2255,  0.2825,  0.2211, -0.1536,  0.1745,\n          0.0540,  0.0146,  0.1210,  0.2319],\n        [-0.2512,  0.0945,  0.1756,  0.2680, -0.2546,  0.0201, -0.0048,  0.1008,\n          0.1973,  0.1473,  0.1175,  0.2505],\n        [-0.0872,  0.0944, -0.0566, -0.1152, -0.0954, -0.0964, -0.0276,  0.0552,\n          0.2462,  0.2379, -0.2409, -0.1012],\n        [-0.1509, -0.0864,  0.0963, -0.2608,  0.2548,  0.2396, -0.0256, -0.1176,\n         -0.2218,  0.0099, -0.1595, -0.2210],\n        [ 0.2281,  0.1268, -0.0027, -0.0539,  0.1397,  0.0676,  0.1709,  0.2233,\n          0.2282,  0.2845, -0.0033,  0.0121],\n        [ 0.0172, -0.2267,  0.2417,  0.1587,  0.2074,  0.2489,  0.1319, -0.0614,\n         -0.1114, -0.2067, -0.1851, -0.1827],\n        [-0.1307, -0.2488,  0.0803, -0.0375, -0.2782, -0.1023,  0.2535,  0.0694,\n          0.1322, -0.2428, -0.0276,  0.0148],\n        [ 0.1342, -0.1727, -0.1844,  0.2305,  0.2461, -0.1674, -0.1802,  0.0737,\n         -0.2068,  0.1196,  0.1289,  0.2254],\n        [ 0.1572,  0.2784, -0.0103, -0.2227,  0.2355,  0.0283, -0.1361, -0.2881,\n         -0.2145,  0.1064, -0.0113, -0.1984],\n        [ 0.1311, -0.0346, -0.2250, -0.1122,  0.1520, -0.2507,  0.0368, -0.2765,\n         -0.2071,  0.1038, -0.0387, -0.0866],\n        [ 0.0201,  0.1772,  0.1521,  0.0233,  0.1791,  0.0066,  0.0098,  0.0172,\n          0.0653,  0.0342, -0.1295, -0.1435],\n        [ 0.2862,  0.2277,  0.0969, -0.0886,  0.0525,  0.2123, -0.2641, -0.1076,\n          0.1544,  0.0938, -0.1694,  0.1566],\n        [ 0.0243,  0.0933,  0.2858, -0.0118,  0.0704, -0.2212,  0.1311, -0.2307,\n          0.2363,  0.1746,  0.0803, -0.1562]], device='cuda:0')), ('layer1.bias', tensor([-0.1688, -0.2218, -0.1700, -0.0781,  0.2589, -0.1607,  0.2259, -0.0009,\n         0.2081, -0.2408,  0.2220,  0.1298, -0.0346,  0.2251,  0.1882,  0.1087,\n         0.1055,  0.2575, -0.1210, -0.2586, -0.2438,  0.0787, -0.1729,  0.2726,\n         0.1800, -0.0948,  0.1265,  0.0720,  0.1778,  0.1509, -0.2758, -0.1700,\n        -0.1425, -0.2358, -0.1162,  0.2328,  0.0548, -0.2135,  0.1291, -0.0893,\n         0.2775, -0.1615,  0.2293, -0.1671, -0.0271, -0.1305,  0.1130, -0.2857,\n         0.0823, -0.0025,  0.0139, -0.2118, -0.2268,  0.1763, -0.1747,  0.0529,\n        -0.0557,  0.0984, -0.2572,  0.1228, -0.0758,  0.2008,  0.2327,  0.0038],\n       device='cuda:0')), ('layer2.weight', tensor([[ 0.0391,  0.0083,  0.0583,  ...,  0.0135, -0.1096,  0.0412],\n        [ 0.0489,  0.1074, -0.1097,  ...,  0.1240,  0.0205,  0.0329],\n        [ 0.0724, -0.0792, -0.1149,  ...,  0.1016,  0.0943, -0.1117],\n        ...,\n        [-0.0785,  0.0216,  0.0978,  ..., -0.1210, -0.0666,  0.0606],\n        [-0.0344, -0.1193,  0.0670,  ..., -0.0202, -0.0453, -0.0380],\n        [-0.0892, -0.0138,  0.0806,  ..., -0.0594, -0.0348, -0.0674]],\n       device='cuda:0')), ('layer2.bias', tensor([ 0.1109, -0.0661, -0.0885,  0.0526,  0.1228,  0.0013, -0.0628, -0.0069,\n        -0.0970,  0.1064, -0.0336,  0.0139, -0.0460,  0.1014,  0.0418, -0.0155,\n         0.0838,  0.0324, -0.0004, -0.0683, -0.0562,  0.0226, -0.0400,  0.0845,\n         0.0548, -0.0060,  0.1244,  0.0409, -0.0533,  0.0067, -0.0045,  0.0334,\n        -0.0450, -0.1216, -0.0100,  0.0878, -0.0023,  0.0215,  0.0101,  0.0386,\n        -0.0987, -0.0200,  0.0461, -0.0989,  0.0348, -0.0155, -0.0238, -0.0041,\n         0.0013, -0.0242,  0.0332, -0.0312,  0.1043,  0.0201, -0.0519,  0.0906,\n         0.1002,  0.0952,  0.0712, -0.0229, -0.1087,  0.0671,  0.0343,  0.0568],\n       device='cuda:0')), ('layer3.weight', tensor([[ 0.0914,  0.1069,  0.0122, -0.0044, -0.0020,  0.0500, -0.0188,  0.1173,\n         -0.1226, -0.0477, -0.0584,  0.0546,  0.0690, -0.0537, -0.1206,  0.0410,\n          0.0934, -0.0913, -0.0398, -0.0930,  0.0273,  0.0341, -0.0157, -0.0308,\n         -0.1035,  0.0601, -0.0121,  0.1215,  0.0811,  0.0578, -0.1016, -0.1228,\n         -0.0618, -0.1052, -0.1186, -0.0118,  0.0335,  0.0223, -0.0600,  0.0105,\n         -0.1239, -0.0196, -0.0249, -0.0540, -0.0576,  0.1099, -0.0601,  0.0729,\n         -0.0012,  0.0389, -0.0567,  0.0185,  0.0004, -0.0574,  0.0407, -0.1192,\n          0.0596, -0.0334, -0.1069, -0.1243, -0.0282, -0.0228, -0.1083,  0.0497]],\n       device='cuda:0')), ('layer3.bias', tensor([-0.0718], device='cuda:0'))])\n","output_type":"stream"}]},{"cell_type":"code","source":"from tqdm import tqdm\nsee = True\n\nfor epoch in range(10):\n    total_loss = 0.0\n    num_batches = len(train_loader)\n    for i,x in enumerate(tqdm(train_loader)):\n        input, target = x\n        input = input.to(device)\n        target = target.to(device).float()\n#         print(target.shape)\n\n        optimizer.zero_grad()\n        output = model(input).squeeze()\n#         if see:\n#             print(output.shape)\n#             see = False\n        loss = loss_fn(output, target)\n        \n        loss.backward()\n        optimizer.step()\n        \n        total_loss += loss.item() #accumulate loss\n    \n    avg_loss = total_loss/num_batches \n    print(f\"For epoch {epoch+1}, loss is: {avg_loss}\")\n    ","metadata":{"execution":{"iopub.status.busy":"2024-08-12T12:20:12.803222Z","iopub.execute_input":"2024-08-12T12:20:12.803610Z","iopub.status.idle":"2024-08-12T12:43:21.029634Z","shell.execute_reply.started":"2024-08-12T12:20:12.803573Z","shell.execute_reply":"2024-08-12T12:43:21.028724Z"},"trusted":true},"execution_count":24,"outputs":[{"name":"stderr","text":"100%|██████████| 77918/77918 [02:21<00:00, 550.51it/s]\n","output_type":"stream"},{"name":"stdout","text":"For epoch 1, loss is: 0.14735404463160515\n","output_type":"stream"},{"name":"stderr","text":"100%|██████████| 77918/77918 [02:18<00:00, 561.77it/s]\n","output_type":"stream"},{"name":"stdout","text":"For epoch 2, loss is: 0.12254534781411196\n","output_type":"stream"},{"name":"stderr","text":"100%|██████████| 77918/77918 [02:18<00:00, 563.16it/s]\n","output_type":"stream"},{"name":"stdout","text":"For epoch 3, loss is: 0.11963521420801278\n","output_type":"stream"},{"name":"stderr","text":"100%|██████████| 77918/77918 [02:18<00:00, 562.92it/s]\n","output_type":"stream"},{"name":"stdout","text":"For epoch 4, loss is: 0.11826821369255164\n","output_type":"stream"},{"name":"stderr","text":"100%|██████████| 77918/77918 [02:18<00:00, 564.03it/s]\n","output_type":"stream"},{"name":"stdout","text":"For epoch 5, loss is: 0.11734478098928627\n","output_type":"stream"},{"name":"stderr","text":"100%|██████████| 77918/77918 [02:19<00:00, 557.18it/s]\n","output_type":"stream"},{"name":"stdout","text":"For epoch 6, loss is: 0.11697802854362638\n","output_type":"stream"},{"name":"stderr","text":"100%|██████████| 77918/77918 [02:18<00:00, 563.45it/s]\n","output_type":"stream"},{"name":"stdout","text":"For epoch 7, loss is: 0.11616369019477198\n","output_type":"stream"},{"name":"stderr","text":"100%|██████████| 77918/77918 [02:18<00:00, 562.56it/s]\n","output_type":"stream"},{"name":"stdout","text":"For epoch 8, loss is: 0.11591888825880728\n","output_type":"stream"},{"name":"stderr","text":"100%|██████████| 77918/77918 [02:17<00:00, 565.57it/s]\n","output_type":"stream"},{"name":"stdout","text":"For epoch 9, loss is: 0.11527313216668075\n","output_type":"stream"},{"name":"stderr","text":"100%|██████████| 77918/77918 [02:18<00:00, 562.09it/s]","output_type":"stream"},{"name":"stdout","text":"For epoch 10, loss is: 0.11527795227611358\n","output_type":"stream"},{"name":"stderr","text":"\n","output_type":"stream"}]},{"cell_type":"code","source":"model.eval()  # Disable certain layers like dropout and batch normalization.\n\ncorrect = 0\ntotal = 0\nsee = True\n\nwith torch.no_grad():\n    for input, target in test_loader:\n        input = input.to(device)\n        target = target.to(device).float()\n        \n        output = model(input).squeeze()\n        \n        # Apply sigmoid to the output to get probabilities\n        probabilities = torch.sigmoid(output)\n        \n        if see:\n            print(probabilities.shape)\n        \n        # Convert probabilities to binary values (1.0 or 0.0)\n        predicted = (probabilities > 0.5).float()\n        \n        if see:\n            print(predicted.shape)\n            see = False\n        \n        total += target.size(0)\n        correct += (predicted == target).sum().item()\n\naccuracy = 100 * correct / total\nprint(f'Accuracy of the model on the test dataset: {accuracy:.2f}%')\n","metadata":{"execution":{"iopub.status.busy":"2024-08-12T12:55:28.290589Z","iopub.execute_input":"2024-08-12T12:55:28.290983Z","iopub.status.idle":"2024-08-12T12:55:41.208067Z","shell.execute_reply.started":"2024-08-12T12:55:28.290952Z","shell.execute_reply":"2024-08-12T12:55:41.207177Z"},"trusted":true},"execution_count":34,"outputs":[{"name":"stdout","text":"torch.Size([32])\ntorch.Size([32])\nAccuracy of the model on the test dataset: 96.28%\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}